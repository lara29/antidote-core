syntax = "proto3";
package syringe.api.exp;

import "google/api/annotations.proto";
// import "google/protobuf/empty.proto";
import "validate/validate.proto";
import "google/protobuf/descriptor.proto";

service LessonDefService {

  // Retrieve all LessonDefs with filter
  rpc ListLessonDefs(LessonDefFilter) returns (LessonDefs) {
    option (google.api.http) = {
      get: "/exp/lessondef"
    };
  }

  rpc GetAllLessonPrereqs(LessonID) returns (LessonPrereqs) {
    option (google.api.http) = {
      get: "/exp/lessondef/{id}/prereqs"
    };
  }

  rpc GetLessonDef(LessonID) returns (LessonDef) {
    option (google.api.http) = {
      get: "/exp/lessondef/{id}"
    };
  }

}


extend google.protobuf.FieldOptions {
  Syringe syringe = 1234;
}

message Syringe {
  string field_description = 1;
}

message LessonDefs {
  repeated LessonDef lessonDefs = 1;
}

message LessonPrereqs {
  repeated int32 prereqs = 1;
}

message LessonID {
  int32 id = 1;
}

message LessonDef {
  int32 LessonId = 1 [(validate.rules).int32.gt = 0];
  repeated LessonStage Stages = 2 [(validate.rules).repeated.min_items = 1];
  string LessonName = 3 [(validate.rules).string.min_len = 10];
  repeated IframeResource IframeResources = 4;
  repeated Endpoint Devices = 5;
  repeated Endpoint Utilities = 6;
  repeated Endpoint Blackboxes = 7;
  repeated Connection Connections = 8;
  string Category = 9 [(validate.rules).string = {in: ["fundamentals", "tools", "workflows"]}];
  string LessonDiagram = 10;
  string LessonVideo = 11;
  string Tier = 12 [(validate.rules).string = {in: ["local", "ptr", "prod"]}];
  repeated int32 Prereqs = 13;
  repeated string Tags = 14;
  string Collection = 15;
  string Description = 16 [(validate.rules).string.min_len = 10];

  // This is meant to fill: "How well do you know <slug>?"
  string Slug = 17 [(validate.rules).string.min_len = 1];
  string LessonFile = 18;
}

message LessonDefFilter {
  string Category = 2;
}

message LessonStage {
  int32 Id = 1 [(validate.rules).int32.gt = 0];
  string Description = 2 [(validate.rules).string.min_len = 1];
  string LabGuide = 3;
  bool JupyterLabGuide = 4;
  bool VerifyCompleteness = 5;
  string VerifyObjective = 6;
  
  enum NapalmStrategy {

    // This is the default. The overwhelming preference is that people provide full configs, to
    // help ensure that atomicity is preserved between stages. However, we're providing the "merge"
    // option here for the rare circumstances where we need to be very careful about what parts
    // of the config we're overwriting.
    REPLACE = 0;
    MERGE  = 1;
  }
  NapalmStrategy ConfigStrategy = 7 [(validate.rules).enum = {in: [0, 1]}];
}

message Endpoint {
  string Name = 1 [(validate.rules).string.min_len = 1];
  string Image = 2 [(validate.rules).string.min_len = 1];

  // This field helps the web client understand how to connect to this endpoint. Some might be done via SSH/Guacamole, others might be iframes, etc.
  enum EndpointType {
    UNKNOWN = 0;       // In proto3, zero value fields are indistinguishable from unset fields, by design. They are not sent on the wire either. So let's set this aside.
    DEVICE = 1;        // A network device. Expected to be reachable via SSH or API on the listed port
    IFRAME = 2;        // Embedded (iframe) web resource
    BLACKBOX = 3;      // Some kind of entity that the user doesn't have access to (i.e. for troubleshooting). Effectively the same as UTILITY but we don't present this to the user in any way on the web UI
    UTILITY = 4;       // Linux container we want to provide access to for tools. Handled pretty much the same as DEVICE, as we SSH to this.
  }
  EndpointType Type = 3;

  repeated int32 Ports = 4;
}

message IframeResource {
  string Ref = 1 [(validate.rules).string.min_len = 1];
  string Protocol = 2 [(validate.rules).string.min_len = 1];
  string Path = 3 [(validate.rules).string.min_len = 1];
  int32 Port = 4 [(validate.rules).int32.gt = 0];
}

message Connection {
  string A = 1 [(validate.rules).string.min_len = 1];
  string B = 2 [(validate.rules).string.min_len = 1];
}
