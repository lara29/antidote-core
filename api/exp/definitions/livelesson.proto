syntax = "proto3";
package syringe.api.exp;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

service LiveLessonsService {

  rpc HealthCheck(google.protobuf.Empty) returns (HealthCheckMessage) {
    option (google.api.http) = {
      get: "/*"
    };
  }

  // Request a lab is created, or request the UUID of one that already exists for these parameters.
  rpc RequestLiveLesson(LessonParams) returns (LessonUUID) {
    option (google.api.http) = {
      post: "/exp/livelesson"
      body: "*"
    };
  }

  // Retrieve details about a lesson
  rpc GetLiveLesson(LessonUUID) returns (LiveLesson) {
    option (google.api.http) = {
      get: "/exp/livelesson/{id}"
    };
  }

  // THESE ARE SENSITIVE - do not expose via REST
  rpc GetSyringeState(google.protobuf.Empty) returns (SyringeState) {}
  rpc AddSessiontoGCWhitelist(Session) returns (HealthCheckMessage) {}
  rpc RemoveSessionFromGCWhitelist(Session) returns (HealthCheckMessage) {}
  rpc GetGCWhitelist(google.protobuf.Empty) returns (Sessions) {}
}

message Session {
  string id = 1;
}

message Sessions {
  repeated Session sessions = 1;
}

message HealthCheckMessage {}

message SyringeState {

  // Map that contains a mapping of UUIDs to LiveLesson messages
  map<string, LiveLesson> Livelessons = 1;

}

enum Status {
  DONOTUSE = 0;   // Protobuf doesn't encode the default value. Throwing this one away.
  INITIAL_BOOT = 1;
  CONFIGURATION = 2;
  READY = 3;
}

// A provisioned lab without the scheduler details. The server will translate from an underlying type
// (i.e. KubeLab) into this, so only the abstract, relevant details are presented.
message LiveLesson {
  string LessonUUID = 1;
  int32 LessonId = 2;
  map <string, LiveEndpoint> LiveEndpoints  = 3;
  int32 LessonStage = 4;
  string LabGuide = 5;
  bool JupyterLabGuide = 6;

  Status LiveLessonStatus = 7;

  google.protobuf.Timestamp createdTime = 8;
  string LessonDiagram = 9;
  string LessonVideo = 10;
  bool Error = 11;
}

message LiveEndpoint {
  string Name  = 1;

  // This field helps the web client understand how to connect to this endpoint. Some might be done via SSH/Guacamole, others might be iframes, etc.
  enum EndpointType {
    UNKNOWN = 0;       // In proto3, zero value fields are indistinguishable from unset fields, by design. They are not sent on the wire either. So let's set this aside.
    DEVICE = 1;        // A network device. Expected to be reachable via SSH or API on the listed port
    IFRAME = 2;        // Embedded (iframe) web resource
    BLACKBOX = 3;      // Some kind of entity that the user doesn't have access to (i.e. for troubleshooting). Effectively the same as UTILITY but we don't present this to the user in any way on the web UI
    UTILITY = 4;       // Linux container we want to provide access to for tools. Handled pretty much the same as DEVICE, as we SSH to this.
  }
  EndpointType Type = 2;

  // This will contain a ClusterIP for SSH endpoints, so we don't need to allocate a public IP for them. If an IFRAME,
  // this will get set to the FQDN needed to connect to the external IP allocated for it.
  string Host = 3;
  int32 Port  = 4;

  string IframePath = 5;

  bool Reachable = 6;
}

message LessonParams {
  int32 lessonId = 1;
  string sessionId = 2;
  int32 lessonStage = 3;
}

message LessonUUID {
  string id = 1;
}


