syntax = "proto3";
package syringe.api.exp;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "lesson.proto";

service LiveLessonsService {

  rpc HealthCheck(google.protobuf.Empty) returns (HealthCheckMessage) {
    option (google.api.http) = {
      get: "/*"
    };
  }

  // Request a lab is created, or request the UUID of one that already exists for these parameters.
  rpc RequestLiveLesson(LessonParams) returns (LessonUUID) {
    option (google.api.http) = {
      post: "/exp/livelesson"
      body: "*"
    };
  }

  // Retrieve details about a lesson
  rpc GetLiveLesson(LessonUUID) returns (LiveLesson) {
    option (google.api.http) = {
      get: "/exp/livelesson/{id}"
    };
  }

  rpc RequestVerification(LessonUUID) returns (VerificationTaskUUID) {
    option (google.api.http) = {
      post: "/exp/livelesson/{id}/verify"
      body: "*"
    };
  }

  rpc GetVerification(VerificationTaskUUID) returns (VerificationTask) {
    option (google.api.http) = {
      get: "/exp/verification/{id}"
    };
  }

  // THESE ARE SENSITIVE - do not expose via REST
  rpc GetSyringeState(google.protobuf.Empty) returns (SyringeState) {}
  rpc AddSessiontoGCWhitelist(Session) returns (HealthCheckMessage) {}
  rpc RemoveSessionFromGCWhitelist(Session) returns (HealthCheckMessage) {}
  rpc GetGCWhitelist(google.protobuf.Empty) returns (Sessions) {}
  rpc ListLiveLessons(google.protobuf.Empty) returns (LiveLessons) {}
  rpc KillLiveLesson(LessonUUID) returns (KillLiveLessonStatus) {}
}

message Session {
  string id = 1;
}

message Sessions {
  repeated Session sessions = 1;
}

message HealthCheckMessage {}

message SyringeState {

  // Map that contains a mapping of UUIDs to LiveLesson messages
  map<string, LiveLesson> Livelessons = 1;

}

enum Status {
  DONOTUSE = 0;   // Protobuf doesn't encode the default value. Throwing this one away.
  INITIAL_BOOT = 1;
  CONFIGURATION = 2;
  READY = 3;
}

// A provisioned lab without the scheduler details. The server will translate from an underlying type
// (i.e. KubeLab) into this, so only the abstract, relevant details are presented.
message LiveLesson {
  string LessonUUID = 1;
  int32 LessonId = 2;
  map <string, Endpoint> LiveEndpoints  = 3;
  int32 LessonStage = 4;
  string LabGuide = 5;
  bool JupyterLabGuide = 6;

  Status LiveLessonStatus = 7;

  google.protobuf.Timestamp createdTime = 8;
  string LessonDiagram = 9;
  string LessonVideo = 10;
  bool Error = 11;
}

message LiveLessons {
  map<string, LiveLesson> items = 1;
}

message VerificationTaskUUID {
  string id = 1;
}

message VerificationTask {
  string liveLessonId = 1;
  int32 liveLessonStage = 2;
  bool success = 3;
  bool working = 4;
  string message = 5;
  google.protobuf.Timestamp completed = 6;
}

message LessonParams {
  int32 lessonId = 1;
  string sessionId = 2;
  int32 lessonStage = 3;
}

message LessonUUID {
  string id = 1;
}

message KillLiveLessonStatus {
  bool success = 1;
}
