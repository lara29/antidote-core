# This script is VERY important. This generates build info and places them into *.go files
# into the source code for every build.
#
# When Antidote is running on a particular release, this is placed within ANTIDOTE_VERSION
# and made available via the "buildVersion" key in the map shown below. This key is relied
# upon by code within Antidote to determine the corresponding version of infrastructure Docker
# images to call upon for things like configuration and jupyter notebooks.
#
# Without a way to couple the version of Antidote with the version of these important platform-related
# docker image, these images might not work properly, resulting in the whole platform not working properly.
#
# Edit this script, and anything that calls it, with caution.


ANTIDOTE_SHA=$(git rev-parse HEAD)
ANTIDOTE_VERSION=$(git describe --exact-match --tags $(git log -n1 --pretty='%h') 2> /dev/null)
IMAGE_VERSION=$(git describe --exact-match --tags $(git log -n1 --pretty='%h') 2> /dev/null)

if [ -z $ANTIDOTE_VERSION ];
then
	ANTIDOTE_VERSION="dev-$ANTIDOTE_SHA(compiled-$(date -u +%D-%T ))"
	IMAGE_VERSION="latest"
fi

cat <<EOT >> ./cmd/antidoted/buildinfo.go
package main

/*
This file is automatically generated by Antidote build scripts.
Please do not edit.
*/

var (
	buildInfo = map[string]string{
		"buildSha": "$ANTIDOTE_SHA",
		"buildVersion": "$ANTIDOTE_VERSION",
		"imageVersion": "$IMAGE_VERSION",
	}
)

EOT


cat <<EOT >> ./cmd/antidote/buildinfo.go
package main

/*
This file is automatically generated by Antidote build scripts.
Please do not edit.
*/

var (
	buildInfo = map[string]string{
		"buildSha": "$ANTIDOTE_SHA",
		"buildVersion": "$ANTIDOTE_VERSION",
		"imageVersion": "$IMAGE_VERSION",
	}
)

EOT

cat <<EOT >> ./cmd/antictl/buildinfo.go
package main

/*
This file is automatically generated by Antidote build scripts.
Please do not edit.
*/

var (
	buildInfo = map[string]string{
		"buildSha": "$ANTIDOTE_SHA",
		"buildVersion": "$ANTIDOTE_VERSION",
		"imageVersion": "$IMAGE_VERSION",
	}
)

EOT
